{"version":3,"sources":["components/Cards.js","App.js","index.js"],"names":["Cards","props","cards","randon","map","value","className","onClick","src","img","alt","id","App","shuffleArray","originalArray","array","slice","i","length","j","Math","floor","random","temp","useState","score","setScore","bestScore","setBestScore","setCards","max","e","target","parentNode","attributes","nodeValue","console","log","childNodes","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb0ca768.chunk.js","sourcesContent":["const Cards = (props) => {\n   const  {cards}=props\n  const { randon } = props\n  \n    return (\n        cards.map(cards => {\n            return(\n        <div value={false}   key={cards.id} className='cards'>\n          <img  onClick={randon} src={cards.img} alt='card' />\n          <span>\n            <strong>{cards.id}</strong>\n          </span>\n        </div>\n            )\n        })\n    )\n}\nexport default Cards","\nimport React, { useState } from \"react\";\nimport Cards from './components/Cards'\nconst App = () => {\n  function shuffleArray(originalArray) {\nlet array = originalArray.slice(0)\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    \n    return array\n}\n  \n  const [score, setScore] = useState(0)\n  const [bestScore,setBestScore]=useState([0])\n\n  const [cards,setCards]=useState([{\n  id: 'Cross Girl',\n  img:'http://img.skenko.com/images/anime/bvybhwbvybhw.jpg',\n},\n  {\n  id: 'On Fire!',\n  img:'http://img.skenko.com/images/anime/oedvggoedvgg.jpg',\n  },\n  {\n  id: 'Pale Girl',\n  img:'http://img.skenko.com/images/anime/jlqinfjlqinf.jpg',\n  },\n  {\n  id: 'Cats, am I right?',\n  img:'http://img.skenko.com/images/anime/kbpvbikbpvbi.jpg',\n  },\n  {\n  id: 'Chilling',\n  img:'http://img.skenko.com/images/anime/wfyijwwfyijw.jpg',\n  },\n  {\n  id: 'Silver',\n  img:'http://img.skenko.com/images/anime/eydtdpeydtdp.jpg',\n  },\n  {\n  id: 'Peace',\n  img:'http://img.skenko.com/images/anime/qpwetuqpwetu.jpg',\n  },\n  {\n  id: 'Deliberation',\n  img:'http://img.skenko.com/images/anime/atyoliatyoli.jpg',\n  },\n  {\n  id: 'Love',\n  img:'http://img.skenko.com/images/anime/lpolyrlpolyr.jpg',\n  },\n  {\n  id: 'Pretty boy',\n  img:'http://img.skenko.com/images/anime/utvaofutvaof.jpg',\n  },\n  {\n  id: 'Weeb',\n  img:'http://img.skenko.com/images/anime/arpheiarphei.jpg',\n  },\n  {\n  id: 'Frankenstein',\n  img:'http://img.skenko.com/images/anime/bqarvubqarvu.jpg',\n  }\n  \n  ])\n \n  \n    \n\n  const randonClick = (e) => {\n\n    let value = e.target.parentNode.attributes[0].nodeValue\n    console.log(e.target.parentNode.parentNode.childNodes[0].attributes[0].nodeValue)\nconsole.log(e.target.parentNode.attributes)\n    if (value === 'true') {\n      setBestScore(bestScore.concat(score))\n      setScore(0)\n      setCards(shuffleArray(cards))\n      e.target.parentNode.parentNode.childNodes[0].attributes[0].nodeValue = 'false'\n      e.target.parentNode.parentNode.childNodes[1].attributes[0].nodeValue = 'false'\n      e.target.parentNode.parentNode.childNodes[2].attributes[0].nodeValue = 'false'\n      e.target.parentNode.parentNode.childNodes[3].attributes[0].nodeValue = 'false'\n      e.target.parentNode.parentNode.childNodes[4].attributes[0].nodeValue = 'false'\n      e.target.parentNode.parentNode.childNodes[5].attributes[0].nodeValue = 'false'\n      e.target.parentNode.parentNode.childNodes[6].attributes[0].nodeValue = 'false'\n      e.target.parentNode.parentNode.childNodes[7].attributes[0].nodeValue = 'false'\n      e.target.parentNode.parentNode.childNodes[8].attributes[0].nodeValue = 'false'\n      e.target.parentNode.parentNode.childNodes[9].attributes[0].nodeValue = 'false'\n      e.target.parentNode.parentNode.childNodes[10].attributes[0].nodeValue = 'false'\n      e.target.parentNode.parentNode.childNodes[11].attributes[0].nodeValue = 'false'\n    }\n    else {\n      e.target.parentNode.attributes[0].nodeValue = 'true'\n      \n      setScore(score + 1)\n      setCards(shuffleArray(cards))\n\n    }\n  \n  }\n    \n    \n  \n  return (<div>\n    <h1>Memory Card Game!</h1>\n    <p>Pick A card and gain a point,but if you alredy picked the card you score will reset. </p>\n    <div id='score'>\n      <h2>Score:{score }</h2>\n            <h2>Best Score:{Math.max(...bestScore)} </h2>\n\n</div>\n  \n    <div  id='container'>\n      <Cards setScore={setScore} randon={randonClick} cards={cards }/>\n    </div>\n    </div>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}